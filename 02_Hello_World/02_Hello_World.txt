第二章 Hello World

- 本章介绍Hello World程序
  * 首先，讲述一个Qt Widget项目的创建、运行和发布的过程
  * 然后，分解项目，从单一的主函数文件到使用图形界面的.ui文件，再到自定义的C++类和Qt图形界面类，逐步分析每行代码
- 学完本章，读者能够掌握Qt项目的建立、编译、运行和发布的整个过程

一、编写Hello World程序

- Hello World程序的任务是显示Hello World字符串
- 这是最简单的应用，却包含了一个应用程序的基本要素，所以一般用它来展示程序的创建过程

1、新建Qt Widget应用

- 创建Qt Widget项目的步骤
  * 选择项目模板:Qt Widgets Application【图2-1】
  * 输入项目信息：helloworld
  * 构建系统：qmake
  * 输入类信息：HelloDialog，基类选择QDialog【图2-2】
  * 选择翻译文件：暂时不需要进行界面翻译
  * 选择构建套件：Desktop Qt 6.2.3 GCC 64bit
  * 设置项目管理：项目的汇总信息和版本控制系统
- 注意，本书将“工程”、“项目”和“应用”作为同义词使用，将“目录”和“文件夹”也作为同义词使用

2、文件说明与界面设计

- 项目创建完成后进入编辑模式，界面的右边是编辑器
  * Ctrl++/-可以用来放大或缩小字体
  * Ctrl+0可以恢复字体为默认大小
- 在项目的目录下，有六个文件，包括helloworld.pro、helloworld.pro.user、hellodialog.h、hellodialog.cpp、main.cpp、helloworld.ui【图2-3】【表2-1】

- 双击helloworld.ui进入设计模式，包括主设计区、部件列表窗口、对象查看器、属性编辑器、动作编辑器和信号/槽编辑器、常用功能图标【图2-4】
- 从部件列表中找到Label部件，将它拖放到主设计区，双击它并输入“Hello World! 你好Qt!”

二、程序的运行与发布

1、程序的运行

- 编译运行程序：Ctrl+R或者左下角的运行按钮
- 项目目录下多了一个build-helloworld-Desktop_Qt_6_2_4_GCC_64bit-Debug目录，这是默认的构建目录【图2-5】
- 直接运行helloworld
  * 如果在Windows下提示缺少.dll文件，就将相应的文件从Qt的安装目录下复制过来
  * 如果不希望复制.dll文件，可以修改Path环境变量，将Qt的安装目录添加进来【图2-6】【图2-7】

2、程序的发布

- 在左下角的目标选择器中选择Release，编译程序的发布版本【图2-8】
- 如果是在Windows下发布，除了helloworld之外，其他的几个.dll文件也需要复制出来

- 还可以使用windeployqt工具来自动部署发布文件【图2-9】
- windeployqt会将所有可用的文件都复制过来，有的可能现在还不需要，所以一般情况下不建议使用

- 注意，如果程序使用了png格式之外的图片，就需要将Qt安装目录下的plugins目录中的的imageformats文件夹复制到发布程序文件夹中
- 另外，静态编译是指将Qt库进行重新编译，这样生成的目标文件就可以直接运行，不需要.dll文件的支持，但目标文件的大小也会变大

3、设置应用程序的图标

- 在Windows下设置应用程序图标的方法
  * 创建.ico文件：myico.ico
  * 修改项目文件helloworld.pro：添加一行代码，RC_ICONS = myico.ico
  * 运行程序并查看效果

三、项目模式和项目文件介绍

1、项目模式

- 项目模式包含构建和运行、编辑器、代码风格、依赖关系等多个设置界面
  * 构建和运行界面下有一个Shadow build选项，选中它可以将源码和编译生成的文件分别存放，这是个好习惯
  * 编辑器设置中可以设置默认的文件编码、制表符和缩进、鼠标和键盘的相关功能等
  * 在代码风格设置中可以自定义代码风格，这里使用了默认的Qt代码风格
  * 在依赖关系中可以设置多个项目之间的依赖关系
  * Clang Tools可以通过静态分析来发现C、C++和Objective-C代码中的问题

2、项目文件

- 项目文件hellodialog.pro中的内容
  * 第一行表明该项目使用的模块，core代表Qt的核心功能，其他模块都依赖于这个模块，gui提供窗口集成、事件处理、OpenGL和OpenGL ES的集成、2D图形、基本图像、字体和文本等功能
  * 第三行添加了widgets模块，这行代码的意思是，如果Qt的主版本大于4就添加widgets模块
  * 第五行开启了对C++11的支持
  * 第七到九行是注释信息，意思是，如果取消第九行的注释，当代码中使用了Qt6中已经被标记为过时的API时，编译就会出错
  * 第十一到十九行分别是项目中包含的源文件、头文件和界面文件
  * 第二十一行的作用是添加应用程序图标
- hellodialog.pro.user包含了本地构建信息，比如，Qt版本、构建目录等，通常该文件不需要公开出去

四、HelloWorld程序源码与编译过程详解

- 本节的内容有点乱，看一遍可能看不懂，但这节的内容其实是精心设计的，多做几遍就会对Qt项目及其编译有深入的理解，对后面的学习大有益处
- 本节介绍多种创建helloworld程序的方法，包括使用纯代码、使用.ui文件再添加类、创建应用程序等
- 本机还会使用命令行对代码进行编译，以便清晰地展示Qt代码的编译过程

1、在Qt Creator中使用纯代码编写并编译运行程序

- 建立空项目，helloworld【图2-10】
- 打开helloworld.pro文件，添加greaterThan(QT_MAJOR_VERSION, 4): QT += widgets
- 在项目文件夹helloworld上右击，添加源文件main.cpp，并向其中添加代码
  * 包含头文件<QApplication>、<QDialog>和<QLabel>
  * 创建QApplication对象，任何一个Qt Widgets应用程序都有一个该对象
  * 新建一个QDialog对象，并在其中添加一个QLabel对象，设置它要显示的文本内容
  * 调用QDialog对象的show成员函数将对话框显示出来
  * 最后，调用QApplication对象的exec成员函数使程序进入消息循环，可以接收各种事件
- 编译并运行【图2-11】
- 修改代码，设置对话框的大小，并将其中的Label移动到指定位置，并通过QObject::tr函数添加对多语言的支持【图2-12】【图2-13】

- 在输入代码时，输入几个字母后就会出现相关的列表选项，即使这几个字母并不是连续出现的也可以被联想出来【图2-14】【图2-15】
- 使用Ctrl+空格可以强制补全代码，如果该快捷键和系统输入法的快捷键发生了冲突，可以在“工具/选项/环境/键盘/TextEditor”中修改

- 将鼠标放在一个类名或函数名上，会出现一个对它进行简单介绍的提示信息
- 按下F1可以在编辑器的右边快速打开帮助文档

2、通过其他编辑器使用纯代码编写程序并在命令行编译运行程序

- 新建项目目录，将上一个示例程序中的main.cpp复制过来【图2-16】
- 通过qmake -project创建项目文件helloworld.pro，并在其中添加greaterThan(QT_MAJOR_VERSION, 4): QT += widgets
- 通过qmake生成用于编译的Makefile文件，并通过mingw32-make来编译程序【图2-17】
- 运行程序

- 这里的qmake是Qt提供的一个编译工具，它可以生成与平台无关的.pro文件，利用该文件可以生成与平台相关的Makefile文件
- Makefile文件中包含要创建的目标文件或可执行文件、它们依赖的文件以及需要运行的命令等信息
- mingw32-make通过读取Makefile文件来执行编译工作，它会为每一个源文件生成一个.o目标文件，最后将所有的目标文件链接起来生成最终的可执行文件

- 以上就是Qt程序编辑、编译和运行的整个过程
- Qt Creator将项目目录管理、源代码编辑和程序编译运行集成在一起，这就是“集成开发环境（IDE）”的含义

3、使用.ui文件来生成界面

- 示例程序使用.ui文件来生成界面，代替前面使用代码生成的界面，然后脱离Qt Creator，使用命令行再次编译.ui文件和整个项目

1）在Qt Creator中使用.ui界面文件

- 添加.ui文件，选择Qt分类中的Qt Designer Form，再选择Dialog without Buttons
- 进入设计模式，在界面上添加一个Label【图2-18】
- 使用Ctrl+Shift+B快捷键或左下角的构建按钮生成ui头文件
  * 第一到七行是注释信息
  * 第九、十和五十二行是预处理指令，防止该头文件被重复包含
  * 第十二到十五行包含了几个头文件
  * 第十七和五十行是Qt名字空间的开始宏和结束宏
  * 第十九到四十四行定义了类Ui_HelloDialog，其中，第35行代码调用了connectSlotsByName函数，使得窗口中的部件可以实现按对象名进行信号和槽的关联
  * 第四十六到四十八行定义了名字空间Ui，其中定义了一个派生自Ui_HelloDialog的类HelloDialog
  * 可以看到，Ui_HelloDialog类实现了和上一节中的main.cpp中相同的功能
- 更改main.cpp文件，包含前面生成的头文件ui_hellodialog.h
- 运行程序，可以看到和前面程序一样的对话框窗口

2）在命令行编译.ui文件和程序

- 新建项目目录，将前面的hellodialog.ui和main.cpp复制过来
- 编译.ui文件，uic -o ui_hellodialog.h hellodialog.ui
- 编译并运行程序，qmake project，在生成的项目文件中添加QT += widgets

4、自定义C++窗口类

- 新建空的项目，在helloworld.pro中添加greaterThan(QT_MAJOR_VERSION, 4): QT += widgets
- 添加C++类，HelloDialog，基类为QDialog，并添加main.cpp【图2-19】
- 在main.cpp中编写源码
- 添加.ui文件，将上一节中的hellodialog.ui复制过来并添加到项目中【图2-20】
- 修改C++类文件，在其中添加HelloDialog类
  * 第一、二和二十二行是预处理指令
  * 第六到八行定义了名字空间Ui，并前置声明了Ui::HelloDialog类，该类就是ui_hellodialog.h中定义的那个类
  * 第十行是新定义的HelloDialog类，派生自QDialog
  * 第十二行使用了Q_OBJECT宏，扩展了普通C++类的功能，比如，使用信号和槽机制，注意该宏必须添加在类开始的私有部分
  * 最后，相应地修改HelloDialog.cpp文件

- 还有一种实现方式是，将HelloDialog类同时派生自Ui::HelloDialog和QDialog，这样就不需要添加对Ui::HelloDialog的指针了
- 不过，现在Qt Creator默认生成的文件都使用单继承方式，所以这里只介绍了这种方式
- 还可以使用QUiLoader动态加载.ui文件，不过这种方式并不常用，就不再介绍了

5、使用现有的Qt设计师界面类

- 创建空的项目
- 添加Qt设计师界面类，界面模板仍然选择Dialog without Buttons
- 在设计模式下，为窗口添加Label，并更改其文本
- 再添加main.cpp文件，修改其中的代码

- 本节的内容是对上一节的内容的简化，这里的Qt设计师界面类其实就是上一节中的C++类和.ui文件的结合，它将两个文件一次性生成了
- 从上述介绍可以看出，同一个应用可以有很多种编码方式来实现，QT Creator在背后为开发者做了很多事情

五、小结

- 本章虽然只讲述了一个简单的Hello World程序，但却描述了Qt项目从建立、编译到运行再到发布的整个过程，同时还讲解了项目的组成
- 穿插于其中的是Qt Creator的一些基本操作和使用流程，读者一定要动手操作并熟练掌握

<2022-1-4>
