第一章 Qt Creator简介

一、软件的下载与安装
二、Qt Creator环境介绍
  1、运行一个示例程序
  2、帮助模式
三、Qt工具简介
  1、Qt Assistant
  2、Qt Designer
  3、Qt Linguist
四、关于本书源码的使用
五、小结

- Qt Creator是一个完整的、跨平台的Qt集成开发环境，包括C++代码编辑器、项目和构建管理工具、集成的上下文帮助系统、图形化调试器、代码管理和浏览工具等
- 本章先介绍Qt Creator的下载、安装和界面环境，然后运行一个Qt示例程序来展示QT Creator的基本使用方法，其中会重点介绍帮助模式的使用

一、软件的下载与安装

- 本书使用的开发平台是Windows 10桌面平台，主要讲解Windows 10下的Qt6，使用其他平台的读者可以参照学习
- 为了避免由于开发环境的版本差异引起的不必要的问题，建议下载和安装与本书相同的软件版本，Qt 6.2.3，其中包含了Qt Creator 6.0.2【图1-1】
  * 读者可以到官网（www.qt.io）上下载qt-unified-windows-x86-4.2.0-online.exe
  * 下载完成后，双击该文件进行安装，注意，安装路径中不能包含中文，在选择组件界面中选择MinGW版本的Qt 6.2.3和一些附加库，后期还可以使用MaintenanceTool.exe来添加或删除组件

- MinGW是Minimalist GNU For Windows的缩写，它是将GNU开发工具移植到Windows平台下的产物，用它开发的程序不需要额外的第三方DLL的支持就可以直接在Windows下运行
- 在Windows中还可以使用MSVC的Qt，这需要使用Visual C++作为编译器

二、Qt Creator环境介绍

- Qt Creator主要由主窗口区、菜单栏、模式选择器、构建套件选择器、定位器和输出窗口等部分组成【图1-2】
  * 菜单栏包括九个菜单选项
  * 模式选择器包括欢迎、编辑、设计、调试、项目和帮助共六种模式，可以通过快捷键Ctrl+1~6来切换
  * 构建套件选择器包括目标选择器、运行按钮、调试按钮和构建按钮
  * 定位器用来快速定位项目、文件、类、方法、帮助文档以及文件系统，配合过滤器可以准确地定位要查找的结果
  * 输出窗口包括问题、搜索结果、程序输出、编译输出、QML Debugger输出、概要信息、版本控制、测试结果共八种输出，可以通过快捷键Alt+1~8来切换

1、运行一个示例程序

- 安装好Qt 6.2.3后，Qt Creator与Qt自动建立连接，可以进行开发了
- 在“工具/选项”的Kits中可以看到自动检测到的Qt版本、编译器和调试器【图1-3】

- 示例页面提供的的示例程序几乎涉及了Qt支持的所有功能，可以在搜索栏中进行查找【图1-4】
- 选择Embedded Dialogs示例程序，这会跳转到项目模式进行套件选择，这里只有一个套件，单击Configure Project按钮即可，注意，不要在示例程序中直接修改代码，应该复制一份自己的拷贝
  * 右键单击embeddeddialogs.pro，选择“Show in File System View”，就可以在文件系统中打开该项目目录了
  * 编辑模式提供了多个快捷视图，默认显示的是项目视图和打开文档视图，另外还有书签视图、文件系统视图、类视图、大纲视图、类层次试图等【图1-6】
  * 大纲视图可以显示已打开文件的所有类、函数和变量，当“与编辑器同步”按钮被选中时，在编辑器中定位到某个函数时，大纲视图中的该函数也会被选中【图1-7】
  * 也可以在编辑器中通过上方的选择符号下拉框来定位文件中的函数和变量【图1-8】

2、帮助模式

- Qt的帮助文档目前是全英文的，读者必须掌握它们，因为它们是原生的东西
- 单击左上角的“Qt 6.2.3 Reference Documentation”可以打开Qt参考文档，这里的分类几乎涵盖了Qt的全部内容【图1-9】
  * Reference分类中列举了Qt的C++类、QML类型、Qt模块和Qt参考文档，这是整个Qt框架的索引
  * Getting Started分类中包含了入门介绍、新特性、示例和教程、支持的平台、授权的方式等
  * Overview分类中介绍了Qt中最重要的内容，包括开发工具、用户界面、核心机制、数据存储、网络连接、图形、移动开发、QML应用等
- 查看帮助时，可以在某个页面添加书签，以便之后再次查看，这可以通过快捷键Ctrl-M来完成【图1-10】

三、Qt工具简介

- 前面安装的Qt中包含了几个很有用的工具，Qt Assistant、Qt Designer和Qt Linguist
- 可以在开始菜单启动它们，也可以在安装目录下找到它们

1、Qt Assistant

- Qt Assistant是可配置、可重新发布的文档阅读器，可以方便地进行定制，并与Qt应用程序一起重新发布
- Qt Assistant的功能
  * 定制Qt Assistant并与应用程序一起发布
  * 快速查找关键词、全文本搜索、生成索引和书签
  * 同时为多个文档集合建立索引并进行搜索
  * 在本地存放文档或在应用程序中提供在线帮助

2、Qt Designer

- Qt Designer是强大的、跨平台的GUI布局和格式构建器
- Qt Designer的功能
  * 使用拖放功能快速设计用户界面
  * 定制部件或从标准部件库中选择部件
  * 以本地外观快速预览格式
  * 通过界面原型生成C++或Java代码
  * 与Visual Studio或Eclipse IDE配合使用
  * 使用Qt信号和槽机制构建功能齐全的用户界面

3、Qt Linguist

- Qt Linguist提供了一套加速应用程序翻译和国际化的工具
- Qt使用单一的源码树和单一的应用程序二进制包就可以同时支持多个语言和书写系统
- Qt Linguist的功能
  * 收集所有UI文本，并通过简单的应用程序提供给翻译人员
  * 语言和字体感知外观
  * 通过智能的合并工具快速为现有应用程序添加新的语言
  * Unicode编码支持世界上大多数字母
  * 运行时可切换从左到右或从右到左的语言
  * 在一个文档中混用多种语言

四、关于本书源码的使用

- 本书的每个示例程序都明确注明了项目源码的路径，最好是先把源码备份一份，有问题时可以进行对比，以找出出错的原因
  * 读者可以到开源社区（www.qter.org）的下载页面下载本书的源码，所以的源码都放在src目录下
  * 复制源码时，不要在项目的路径中包含中文

五、小结

- 本章简单介绍了Qt和Qt Creator的下载、安装以及Qt示例程序的运行
- 最重要的是掌握Qt帮助的使用，因为后续章节中的几乎每个知识点都需要使用Qt的帮助索引来查找关键字
- 读者现在对Qt Creator还比较陌生，本章只对主要部件做了简单介绍，具体的使用方法会分散到后续各个章节中来讲

<2022-1-3>
