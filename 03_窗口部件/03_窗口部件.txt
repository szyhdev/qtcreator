第三章 窗口部件

一、基础窗口部件QWidget
  1、窗口、子部件以及窗口类型
    1）窗口与子部件
    2）窗口类型
  2、窗口几何布局
  3、程序调试
    1）设置断点
    2）单步调试
    3）使用qDebug函数
二、对话框QDialog
  1、模态和非模态对话框
  2、初识信号和槽并实现多窗口切换
    1）认识信号和槽
    2）自定义对话框
    3）在主界面中使用自定义对话框
  3、标准对话框
    1）颜色对话框
    2）文件对话框
    3）字体对话框
    4）输入对话框
    5）消息对话框
    6）进度对话框
    7）错误信息对话框
    8）向导对话框
三、其他窗口组件
  1、QFrame类族
    1）QLabel
    2）QLCDNumber
    3）QStackedWidget
    4）QToolBox
  2、按钮部件
    1）QPushButton
    2）QCheckBox、QRadioButton和QGroupBox
  3、QLineEdit
    1）显示模式
    2）输入掩码
    3）输入验证
    4）自动补全
  4、QAbstractSpinBox
    1）QDateTimeEdit
    2）QSpinBox和QDoubleSpinBox
  5、QAbstractSlider
四、小结

- 本章开始正式接触窗口部件
- 在上一章中看到，Qt Creator提供的默认基类只有QMainWindow、QDialog和QWidget，这三种是以后用的比较多的【图3-1】
  * QMainWindow：带有菜单栏和工具栏的主窗口类
  * QDialog：各种对话框的基类
  * QWidget：QMainWindow和QDialog都派生自QWidget，事实上，所有的窗口部件都派生自QWidget

一、基础窗口部件QWidget

- QWidget是所有用户界面对象的基类，被称为“基础窗口部件”
- QWidget派生自QObject和QPaintDevice
  * QObject是所有支持Qt对象模型的对象的基类
  * QPaintDevice是所有支持绘制的对象的基类

1、窗口、子部件以及窗口类型

1）窗口与子部件

- 在mywidget1.pro中添加一行QT += widgets，并添加源文件SOURCES += main.cpp
- 包含头文件<QtWidgets>
- 程序中定义了一个QWidget对象，widget，两个QLabel对象，label和label2，其中，label没有父窗口，而label2的父窗口是widget【图3-2】
- 程序的最后删除了label和widget但没有删除label2，这是因为label2是widget的子部件，删除widget时会自动删除label2

- 窗口部件是Qt中建立用户界面的主要元素，比如，主窗口、对话框、标签等
  * 窗口部件有时也可以作为一个容器来放置其他部件
  * 没有嵌入到其他部件中的部件称为“窗口”，一般都有边框和标题栏
  * QMainWindow和QDialog都是窗口，属于没有父部件的部件，也称为“顶级部件”
  * 与之相对的是非窗口部件，也称为“子部件”，Qt中的大部分部件都是子部件

- QWidget提供了绘制和处理用户输入的功能
- 要设计自己的窗口部件，可以从QWidget或其子类派生

2）窗口类型

- 窗口一般都有边框和标题栏，但这并不是必须的
- QWidget的构造函数的第二个参数是Qt::WindowFlags类型，它是Qt::WindowType枚举类型的值或值的组合，比如，Qt::Dialog和Qt::SplashScreen
  * Qt::FramelessWindowHint用来产生一个没有边框的窗口
  * Qt::WindowStaysOnTopHint使该窗口停留在其他所有窗口的上面
- Alt-F4可以关闭当前窗口
- QWidget还有一个setWindowState用来设置窗口的状态，参数是Qt::WindowState枚举类型，比如，Qt::WindowFullScreen

2、窗口几何布局

- 对于窗口的大小和位置，根据窗口是否包含边框和标题栏，需要使用不同的函数来获取【图3-3】
  * 包括边框：x、y、frameGeometry、pos、move等
  * 不包括边框：geometry、width、height、rect、size等

3、程序调试

1）设置断点

- 将光标放在函数上，按下F1，可以打开帮助文档
- 在一行代码的标号前单击鼠标，可以设置断点
- 要取消断点，只需要在那个断点上再单击一下即可
- 按下F5或者左下角的调试按钮，进入调试模式，可以看到调试按钮、栈视图、局部变量和表达式视图、断点视图、线程视图等【图3-4】

2）单步调试

- 单击“单步跳过”按钮，局部变量视图中的变量的值就会发生变化
- 使用调试器进行调试需要等待一段时间，而且步骤较麻烦，下面介绍一种更简便的方法

3）使用qDebug函数

- qDebug函数可以将调试信息输出到控制台
- 使用qDebug需要包含头文件<QDebug>【图3-5】
  * 一种方法是，为qDebug传递一个字符串
  * 另一种方法是，像使用输出流那样使用qDebug

二、对话框QDialog

1、模态和非模态对话框

- QDialog是所有对话框窗口类的基类
- 对话框窗口是用来完成短小任务或者和用户进行简单交互的顶层窗口
- 按照运行对话框时用户是否还可以和其他窗口进行交互，对话框分为模态和非模态两类
  * 要使一个对话框成为模态对话框，只需要调用它的exec函数
  * 要使一个对话框成为非模态模式对话框，只需要调用它的show函数
  * 其实，调用show函数也可以显示模态对话框，只需要在它的前面调用setModal函数，区别在于show会把程序的控制权交还给调用者，而exec只有在对话框关闭后才返回
- 与setModal类似的还有一个函数，setWindowModality

2、初识信号和槽并实现多窗口切换

1）认识信号和槽

- Qt使用信号和槽来完成对象之间的协同操作
  * 简单地说，信号和槽都是函数
  * 将一个按钮的单击信号和一个自定义的槽关联起来，单击该按钮时，对应的槽就会被执行
- 修改上一节的示例程序【图3-6】
  * 双击mydialog1.ui文件，在界面上添加一个Label和一个PushButton
  * 在MyWidget类定义的最后添加槽的声明showChildDialog，然后在mywidget.cpp中添加槽的定义
  * 在MyWidget类的构造函数中，使用connect函数将按钮的clicked信号与槽进行关联

- 上面的方法是手动关联，还有一种自动关联的方法
  * 将关联函数整合到槽的命名中，即，将showChildDailog更名为on_showChildButton_clicked
  * 然后就可以删掉connect函数的调用了
- 自动关联的方法更简便，Qt设计器生成的槽都使用这种方法
- 不过，对于不是通过Qt设计器添加的部件，必须在调用setupUi之前定义该部件，并使用setObjectName函数来指定部件的对象名，这样才能使用自动关联

2）自定义对话框

- 添加自定义对话框，选择Qt设计师界面类，再选择界面模板Dialog without Buttons
- 设计信号和槽
  * 单击设计器上方的“Edit Signals/Slots”或者按下F4进入信号和槽的编辑模式，在配置连接对话框中选中“显示从QWidget继承的信号和槽”，在左边的QPushButton中选择信号clicked，在右边的QDialog中选择对应的槽close，点击“确定”按钮来建立信号和槽之间的关联【图3-7】
  * 然后设置“进入主界面”按钮的信号和槽的关联，在按钮上右击，在弹出的级联菜单中选择“转到槽”，然后选择clicked信号并单击“确定”按钮，然后在自动生成的on_pushButton_clicked槽中编写代码

3）在主界面中使用自定义对话框

- 更改main.cpp，在主函数中创建MyDialog对象，调用其exec函数并判断其返回值，如果是QDialog::Accepted，则显示主界面，并正常执行程序，否则，直接退出程序
- 程序实现了从登录对话框到主界面，然后从主界面显示一个对话框的应用，最后再从主界面重新返回登录对话框
- 注意，close并不一定使程序退出，只有在仅剩最后一个主界面时，调用close才会使程序退出，否则，界面只是隐藏起来，并没有被销毁

3、标准对话框

- Qt提供了一些常用的对话框类型，它们都派生自QDialog，增加了自己的特色功能，用来获取颜色、显示特定信息等【图3-8】

1）颜色对话框

- 颜色对话框提供了一个可以获取指定颜色的对话框
- QColorDialog的静态函数getColor用来获取颜色，返回一个QColor类型的数据
- 如果想要更灵活的设置，应该先创建QColorDialog对象，然后进行各项设置

2）文件对话框

- 文件对话框提供了一个允许用户选择文件或文件夹的对话框
- QFileDialog的静态函数getOpenFileName用来获取选择的文件名，它会打开一个模式对话框
- 要想同时打开多个文件，可以使用getOpenFileNames函数，结果存放在QStringList类型的变量中
- 当然，也可以不使用这些静态函数，而通过创建对话框对象来进行操作
- QFileDialog还提供了getSaveFileName函数来实现保存文件对话框，getExistingDirectory函数来获取一个已经存在的文件夹路径

3）字体对话框

- 字体对话框提供了一个可以选择字体的对话框
- QFontDialog的静态函数getFont用来获取选择的字体

4）输入对话框

- 输入对话框可以让用户输入一个单一的数值或者字符串
  * getText函数提供了一个输入字符串的对话框
  * getInt函数提供了一个输入整数的对话框
  * getDouble函数提供了一个输入浮点数的对话框
  * getItem函数提供了一个输入条目的对话框，当然，需要首先为它提供一些条目
- 也可以先定义对话框对象，再使用相关的函数进行设置

5）消息对话框

- 消息对话框提供了一个模态的对话框来通知用户一些信息，或者向用户提出问题并获得答案
- 这里展示了四种不同类型的消息对话框，分别拥有不同的图标和提示音，参数用来设置父窗口、标题栏、显示信息、按钮等，其中，按钮都是QMessageBox类提供的标准按钮

6）进度对话框

- 进度对话框用来对一个耗时较长的进度作出反馈
- 注意，为了避免用户界面长时间冻结，必须不断地调用QCoreApplication的静态函数processEvents
- 这里的对话框被设置为模态的，其实，QProcessDialog也可以显示为非模态对话框，不过，那样它就需要定时器的帮助

7）错误信息对话框

- 错误信息对话框提供了一个显示错误信息的对话框
- 首先创建一个QErrorDialog对象，然后调用它的showMessage来显示错误信息，对话框是以非模态的方式显示的
- 错误信息对话框中默认有一个Show this message again复选框，因此，不能像前几个例子那样在槽中创建QErrorDialog对象

8）向导对话框

- 向导对话框提供了一个设计向导界面的框架
- 之所以被称为框架，是因为它具有设计一个向导所需的全部功能函数
- 首先创建QWizard对象，然后调用其addPage函数添加页面

三、其他窗口组件

1、QFrame类族

- QFrame是带有边框的部件的基类
- QFrame的派生类包括常用的QLabel、QLCDNumber、QSplitter、QStackedWidget、QToolBox、QAbstractScrollArea
- 其中，QAbstractScrollArea是所有带有滚动区域的部件的抽象基类，需要说明的是，Qt中带有Abstract字样的类都是抽象类，不能直接使用

- 带有边框的部件的一个主要特点是，可以有一个明显的框架
- QFrame类的一个主要功能就是实现不同的边框效果，主要是边框的形状和阴影【表3-1】【表3-2】
- 对于大部分Qt的标准部件，一般在Qt设计器中设置其属性即可，对于能在Qt设计器中设置的属性，都有相应的函数可以通过代码来设置

1）QLabel

- QLabel用来显示文本或者图片，QFont提供了对字体的设置，QFontMetrics用来计算给定字体的字符串的大小

2）QLCDNumber

- QLCDNumber可以让数码字符显示出液晶数字那样的效果

3）QStackedWidget

- QStackedWidget提供了一个部件栈，可以包含多个页面，每个页面都拥有自己的部件，不过每次只能显示一个页面
  * 这个部件需要使用QComboBox或者QListWidget来选择各个页面
  * 这是通过将listWidget的currentRowChanged信号和stackedWidget的setCurrentIndex槽相关联来实现的

4）QToolBox

- QToolBox提供了一列层叠窗口部件，通过右击并在弹出的菜单中选择“插入页”来添加页面

2、按钮部件

- QAbstractButton是按钮部件的抽象基类，提供了按钮的通用功能
- QAbstractButton的派生类包括QCheckBox、QPushButton、QRadioButton和QToolButton

1）QPushButton

- QPushButton提供了一个标准按钮
- 为按钮设置文本，在某个字母前添加“&”将使该按钮的快捷键被设置为Alt加这个字母

2）QCheckBox、QRadioButton和QGroupBox

- QCheckBox提供同时选择多项的功能
- QRadioButton提供了只能选择一项的功能
- QGroupBox一般用来管理一组按钮

3、QLineEdit

- QLineEdit是一个单行的文本编辑器，允许用户输入和编辑单行的文本内容，而且提供了一系列有用的功能，包括撤销与恢复、剪切与拖放等【图3-9】

1）显示模式

- QLineEdit有四种显示模式
  * Normal：正常显示输入的信息
  * NoEcho：不显示任何输入
  * Password：以密码样式显示输入的信息
  * PasswordEchoOnEdit：在编辑时显示正常字符，其他情况下显示为密码样式

2）输入掩码

- QLineEdit提供了输入掩码来限制输入的内容
- 可以使用一些特殊字符来设置输入的格式和内容，这些字符有的具有限制作用且必须输入一个字符，而有的只是起限制作用，但可以不输入字符而是以空格代替【表3-3】

3）输入验证

- QLineEdit还可以使用验证器来对输入进行约束
  * QIntValidator和QDoubleValidator分别用来验证整数和浮点数
  * 如果需要更强大的字符约束，就需要使用正则表达式了，这是通过QRegularExpressionValidator实现的

4）自动补全

- QLineEdit提供了强大的自动补全功能，这是利用QCompleter类实现的

4、QAbstractSpinBox

- QAbstractSpinBox是一个抽象基类，提供了一个数值设定框和一个行编辑器来显示设定值
- QAbstractSpinBox有三个派生类，QDateTimeEdit、QSpinBox和QDoubleSpinBox，分别用来完成日期时间、整数和浮点数的设定

1）QDateTimeEdit

- QDateTimeEdit提供了一个可以编辑日期和时间的部件

2）QSpinBox和QDoubleSpinBox

- QSpinBox用来设置整数，而QDoubleSpinBox用来设置浮点数

5、QAbstractSlider

- QAbstractSlider用来提供区间内的一个整数值，它有一个滑块，可以定位到整数区间内的任意值
- QAbstractSlider有三个派生类，QScrollBar、QSlider和QDial
  * QScrollBar通常用在QScrollArea中来实现滚动区域
  * QSlider是常见的音量控制或播放进度的滑块部件
  * QDial是一个刻度表盘部件

- 将刻度表盘部件dial的sliderMoved信号与其他各个部件的setValue槽关联起来
- 运行程序并拖动刻度表盘的滑块，可以看到其他所有的部件都跟着动起来了

四、小结

- 本章讲述了许多常用的窗口部件的使用方法，涉及到程序调试、信号和槽等知识
- 目前读者没必要把所有的部件都熟练掌握，以后还可以再回过头来深入学习
- 最重要的是掌握创建窗口部件的流程以及它们之间的关系，多练习使用信号和槽、qDebug函数等，这是以后Qt编程中经常会用到的

<2022-1-6>
